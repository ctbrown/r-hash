% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/has_key.R
\docType{methods}
\name{has_key}
\alias{has_key}
\alias{has.key}
\alias{has.key,ANY,hash-method}
\title{Test for existence of key(s) on a hash}
\usage{
has_key(hash, key, ...)

has.key(key, hash, ...)

\S4method{has.key}{ANY,hash}(key, hash, ...)
}
\arguments{
\item{hash}{\strong{hash} object.}

\item{key}{vector whose entries will be coerced to valid keys.}

\item{...}{arguments passed to sapply.}
}
\value{
logical vector with `length(key)`` indicating whether
the key is defined in the hash.
}
\description{
\strong{Note:} \code{has.key()} will be replaced by \code{has_key()} in the future.
`
}
\details{
\code{has_key} indicates whether the key exists on the hash.

\code{has_key} is a wrapper around \code{\link[base:exists]{base::exists()}} vectorized over \code{key} using
\code{\link[base:sapply]{base::sapply()}}. Additional arguments, \code{...} are passed to \code{\link[base:sapply]{base::sapply()}}.
The inherits method is always \code{FALSE}

\code{has_key()} is replacing \code{has.key} and switching the order of arguments. This
makes \code{has_key()} more pipe-able and readable. \code{has.key()} will be deprecated
in a future release.
}
\examples{
    h <- hash( letters, 1:26 )
    all( has.key( letters, h ) ) # TRUE
    
}
\seealso{
\itemize{
\item \code{\link[base:exists]{base::exists()}}
}
}
